--- a/build/linux/unbundle/remove_bundled_libraries.py
+++ b/build/linux/unbundle/remove_bundled_libraries.py
@@ -91,7 +91,7 @@
 
   # Fail if exclusion list contains stale entries - this helps keep it
   # up to date.
-  for exclusion, used in exclusion_used.iteritems():
+  for exclusion, used in exclusion_used.items():
     if not used:
       print('%s does not exist' % exclusion)
       exit_code = 1
--- a/tools/polymer/polymer.py
+++ b/tools/polymer/polymer.py
@@ -491,8 +491,8 @@
   # across platforms.
   with io.open(os.path.join(out_folder, result[1]), mode='w', encoding='utf-8', newline='\n') as f:
     for l in result[0]:
-      if (type(l) != unicode):
-        l = unicode(l, encoding='utf-8')
+      if (type(l) != str):
+        l = str(l, encoding='utf-8')
       f.write(l)
   return
 
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/ui/webui/resources/tools/js_modulizer.py.orig	2020-03-17 01:26:22.628713424 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/ui/webui/resources/tools/js_modulizer.py	2020-03-17 01:26:49.208712738 +0300
@@ -123,7 +123,7 @@
   # across platforms.
   with io.open(os.path.join(out_folder, out_filename), 'w', newline='\n') as f:
     for l in lines:
-      f.write(unicode(l, 'utf-8'))
+      f.write(str(l, encoding='utf-8'))
   return
 
 def main(argv):
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/ui/webui/resources/tools/js_modulizer.py.orig	2020-03-17 01:26:22.628713424 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/ui/webui/resources/tools/js_modulizer.py	2020-03-17 01:28:38.218709924 +0300
@@ -123,7 +123,7 @@
   # across platforms.
   with io.open(os.path.join(out_folder, out_filename), 'w', newline='\n') as f:
     for l in lines:
-      f.write(unicode(l, 'utf-8'))
+      f.write(str(l))
   return
 
 def main(argv):
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/build/scripts/template_expander.py.orig	2020-03-17 01:32:54.588703307 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/build/scripts/template_expander.py	2020-03-17 01:34:43.888700486 +0300
@@ -64,6 +64,6 @@
             parameters = generator(*args, **kwargs)
             return apply_template(template_path, parameters, filters=filters,
                                   tests=tests, template_cache=template_cache)
-        generator_internal.func_name = generator.func_name
+        generator_internal.__name__ = generator.__name__
         return generator_internal
     return real_decorator
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/build/scripts/make_runtime_features.py.orig	2020-03-17 01:36:58.538697011 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/build/scripts/make_runtime_features.py	2020-03-17 01:37:17.028696533 +0300
@@ -28,7 +28,7 @@
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 import copy
-import cPickle as pickle
+import pickle
 import os
 import sys
 
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/build/scripts/json5_generator.py.orig	2020-03-17 01:39:15.318693480 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/build/scripts/json5_generator.py	2020-03-17 01:39:47.558692648 +0300
@@ -103,7 +103,7 @@
         assert valid_keys, "'valid_keys' must be declared when using a dict value"
         return all([(key in valid_keys or key == "default")
                     and (val in valid_values or val == "")
-                    for key, val in value.iteritems()])
+                    for key, val in value.items()])
     else:
         return value in valid_values
 
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/bindings/scripts/utilities.py.orig	2020-03-17 01:41:08.618690556 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/bindings/scripts/utilities.py	2020-03-17 01:41:32.188689947 +0300
@@ -8,7 +8,7 @@
 """
 
 import os
-import cPickle as pickle
+import pickle
 import re
 import shlex
 import string
@@ -210,7 +210,7 @@
     |target| will be updated with |diff|.  Part of |diff| may be re-used in
     |target|.
     """
-    for key, value in diff.iteritems():
+    for key, value in diff.items():
         if key not in target:
             target[key] = value
         elif type(value) == dict:
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/bindings/scripts/utilities.py.orig	2020-03-17 01:41:08.618690556 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/bindings/scripts/utilities.py	2020-03-17 01:43:19.778687170 +0300
@@ -8,7 +8,7 @@
 """
 
 import os
-import cPickle as pickle
+import pickle
 import re
 import shlex
 import string
@@ -210,7 +210,7 @@
     |target| will be updated with |diff|.  Part of |diff| may be re-used in
     |target|.
     """
-    for key, value in diff.iteritems():
+    for key, value in diff.items():
         if key not in target:
             target[key] = value
         elif type(value) == dict:
@@ -406,7 +406,7 @@
         if parences < 0 or square_brackets < 0:
             raise ValueError('You have more close braces than open braces.')
         if parences == 0 and square_brackets == 0:
-            name, _, value = map(string.strip, concatenated.partition('='))
+            name, _, value = map(str.strip, concatenated.partition('='))
             extended_attributes[name] = value
             concatenated = None
     return extended_attributes
@@ -422,7 +422,7 @@
     if not match:
         return None
     arguments = []
-    for argument in map(string.strip, match.group(1).split(',')):
+    for argument in map(str.strip, match.group(1).split(',')):
         exposed, runtime_enabled = argument.split()
         arguments.append({'exposed': exposed, 'runtime_enabled': runtime_enabled})
 
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/bindings/scripts/utilities.py.orig	2020-03-17 01:41:08.618690556 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/bindings/scripts/utilities.py	2020-03-17 01:45:53.668683198 +0300
@@ -8,7 +8,7 @@
 """
 
 import os
-import cPickle as pickle
+import pickle
 import re
 import shlex
 import string
@@ -210,7 +210,7 @@
     |target| will be updated with |diff|.  Part of |diff| may be re-used in
     |target|.
     """
-    for key, value in diff.iteritems():
+    for key, value in diff.items():
         if key not in target:
             target[key] = value
         elif type(value) == dict:
@@ -316,7 +316,7 @@
     # Write file in binary so that when run on Windows, line endings are not
     # converted
     with open(destination_filename, 'wb') as destination_file:
-        destination_file.write(new_text)
+        destination_file.write(bytes(new_text))
 
 
 def write_pickle_file(pickle_filename, data):
@@ -406,7 +406,7 @@
         if parences < 0 or square_brackets < 0:
             raise ValueError('You have more close braces than open braces.')
         if parences == 0 and square_brackets == 0:
-            name, _, value = map(string.strip, concatenated.partition('='))
+            name, _, value = map(str.strip, concatenated.partition('='))
             extended_attributes[name] = value
             concatenated = None
     return extended_attributes
@@ -422,7 +422,7 @@
     if not match:
         return None
     arguments = []
-    for argument in map(string.strip, match.group(1).split(',')):
+    for argument in map(str.strip, match.group(1).split(',')):
         exposed, runtime_enabled = argument.split()
         arguments.append({'exposed': exposed, 'runtime_enabled': runtime_enabled})
 
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/bindings/scripts/utilities.py.orig	2020-03-17 01:41:08.618690556 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/third_party/blink/renderer/bindings/scripts/utilities.py	2020-03-17 01:47:26.358680806 +0300
@@ -8,7 +8,7 @@
 """
 
 import os
-import cPickle as pickle
+import pickle
 import re
 import shlex
 import string
@@ -210,7 +210,7 @@
     |target| will be updated with |diff|.  Part of |diff| may be re-used in
     |target|.
     """
-    for key, value in diff.iteritems():
+    for key, value in diff.items():
         if key not in target:
             target[key] = value
         elif type(value) == dict:
@@ -316,7 +316,7 @@
     # Write file in binary so that when run on Windows, line endings are not
     # converted
     with open(destination_filename, 'wb') as destination_file:
-        destination_file.write(new_text)
+        destination_file.write(new_text.encode('utf-8'))
 
 
 def write_pickle_file(pickle_filename, data):
@@ -406,7 +406,7 @@
         if parences < 0 or square_brackets < 0:
             raise ValueError('You have more close braces than open braces.')
         if parences == 0 and square_brackets == 0:
-            name, _, value = map(string.strip, concatenated.partition('='))
+            name, _, value = map(str.strip, concatenated.partition('='))
             extended_attributes[name] = value
             concatenated = None
     return extended_attributes
@@ -422,7 +422,7 @@
     if not match:
         return None
     arguments = []
-    for argument in map(string.strip, match.group(1).split(',')):
+    for argument in map(str.strip, match.group(1).split(',')):
         exposed, runtime_enabled = argument.split()
         arguments.append({'exposed': exposed, 'runtime_enabled': runtime_enabled})
 
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/mojom_bindings_generator.py.orig	2020-03-17 01:58:30.348663667 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/mojom_bindings_generator.py	2020-03-17 01:59:42.738661799 +0300
@@ -146,7 +146,7 @@
 
 def ReadFileContents(filename):
   with open(filename, 'rb') as f:
-    return f.read()
+    return f.read().decode('utf-8')
 
 
 class MojomProcessor(object):
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/generators/mojom_cpp_generator.py.orig	2020-03-17 02:01:29.948659032 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/generators/mojom_cpp_generator.py	2020-03-17 02:02:23.788657642 +0300
@@ -273,7 +273,7 @@
 
     types = set(self._GetFullMojomNameForKind(typename)
                 for typename in
-                self.module.structs + all_enums + self.module.unions)
+                list(self.module.structs) + all_enums + list(self.module.unions))
     headers = set()
     for typename, typemap in self.typemap.items():
       if typename in types:
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/generators/mojom_cpp_generator.py.orig	2020-03-17 02:01:29.948659032 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/generators/mojom_cpp_generator.py	2020-03-17 02:04:01.428655122 +0300
@@ -253,7 +253,7 @@
           for field in kind.fields:
             AddKind(field.kind)
 
-    for kind in self.module.structs + self.module.unions:
+    for kind in list(self.module.structs) + list(self.module.unions):
       for field in kind.fields:
         AddKind(field.kind)
 
@@ -273,7 +273,7 @@
 
     types = set(self._GetFullMojomNameForKind(typename)
                 for typename in
-                self.module.structs + all_enums + self.module.unions)
+                list(self.module.structs) + all_enums + list(self.module.unions))
     headers = set()
     for typename, typemap in self.typemap.items():
       if typename in types:
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/generators/mojom_cpp_generator.py.orig	2020-03-17 02:01:29.948659032 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/generators/mojom_cpp_generator.py	2020-03-17 02:06:06.078651905 +0300
@@ -253,7 +253,7 @@
           for field in kind.fields:
             AddKind(field.kind)
 
-    for kind in self.module.structs + self.module.unions:
+    for kind in list(self.module.structs) + list(self.module.unions):
       for field in kind.fields:
         AddKind(field.kind)
 
@@ -273,7 +273,7 @@
 
     types = set(self._GetFullMojomNameForKind(typename)
                 for typename in
-                self.module.structs + all_enums + self.module.unions)
+                list(self.module.structs) + all_enums + list(self.module.unions))
     headers = set()
     for typename, typemap in self.typemap.items():
       if typename in types:
@@ -286,10 +286,10 @@
     When false, the generated headers do not need to include interface_ptr.h
     and similar.
     """
-    if len(self.module.interfaces) > 0:
+    if len(list(self.module.interfaces)) > 0:
       return True
     return any(map(mojom.ContainsHandlesOrInterfaces,
-                   self.module.structs + self.module.unions))
+                   list(self.module.structs) + list(self.module.unions)))
 
   def _ReferencesAnyNativeType(self):
     """Returns whether this module uses native types directly or indirectly.
@@ -300,7 +300,7 @@
     m = self.module
     # Note that interfaces can contain scoped native types.
     return any(map(mojom.ContainsNativeTypes,
-                   m.enums + m.structs + m.interfaces))
+                   list(m.enums) + list(m.structs) + list(m.interfaces)))
 
   def _GetDirectlyUsedKinds(self):
     for struct in self.module.structs + self.module.unions:
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/pylib/mojom/generate/generator.py.orig	2020-03-17 02:07:29.328649756 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/pylib/mojom/generate/generator.py	2020-03-17 02:08:03.368648877 +0300
@@ -112,7 +112,7 @@
 
   # Dump the data to disk.
   with open(full_path, "wb") as f:
-    f.write(contents)
+    f.write(contents.encode('utf-8'))
 
 
 def AddComputedData(module):
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/mojom_bindings_generator.py.orig	2020-03-17 01:58:30.348663667 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/mojom_bindings_generator.py	2020-03-17 02:16:47.218635356 +0300
@@ -122,7 +122,7 @@
         i = i + 1
         if i == 1000000:
           raise Exception("Could not generate %d method ordinals for %s" %
-              (len(interface.methods), interface.mojom_name))
+              (len(list(interface.methods)), interface.mojom_name))
         # Generate a scrambled method.ordinal value. The algorithm doesn't have
         # to be very strong, cryptographically. It just needs to be non-trivial
         # to guess the results without the secret salt, in order to make it
@@ -146,7 +146,7 @@
 
 def ReadFileContents(filename):
   with open(filename, 'rb') as f:
-    return f.read()
+    return f.read().decode('utf-8')
 
 
 class MojomProcessor(object):
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/generators/mojom_cpp_generator.py.orig	2020-03-17 02:01:29.948659032 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/generators/mojom_cpp_generator.py	2020-03-17 02:19:29.868631158 +0300
@@ -163,7 +163,7 @@
 
 def ShouldInlineStruct(struct):
   # TODO(darin): Base this on the size of the wrapper class.
-  if len(struct.fields) > 4:
+  if len(list(struct.fields)) > 4:
     return False
   for field in struct.fields:
     if mojom.IsReferenceKind(field.kind) and not mojom.IsStringKind(field.kind):
@@ -180,7 +180,7 @@
 def HasPackedMethodOrdinals(interface):
   """Returns whether all method ordinals are packed such that indexing into a
   table would be efficient."""
-  max_ordinal = len(interface.methods) * 2
+  max_ordinal = len(list(interface.methods)) * 2
   return all(method.ordinal < max_ordinal for method in interface.methods)
 
 
@@ -253,7 +253,7 @@
           for field in kind.fields:
             AddKind(field.kind)
 
-    for kind in self.module.structs + self.module.unions:
+    for kind in list(self.module.structs) + list(self.module.unions):
       for field in kind.fields:
         AddKind(field.kind)
 
@@ -273,7 +273,7 @@
 
     types = set(self._GetFullMojomNameForKind(typename)
                 for typename in
-                self.module.structs + all_enums + self.module.unions)
+                list(self.module.structs) + all_enums + list(self.module.unions))
     headers = set()
     for typename, typemap in self.typemap.items():
       if typename in types:
@@ -286,10 +286,10 @@
     When false, the generated headers do not need to include interface_ptr.h
     and similar.
     """
-    if len(self.module.interfaces) > 0:
+    if len(list(self.module.interfaces)) > 0:
       return True
     return any(map(mojom.ContainsHandlesOrInterfaces,
-                   self.module.structs + self.module.unions))
+                   list(self.module.structs) + list(self.module.unions)))
 
   def _ReferencesAnyNativeType(self):
     """Returns whether this module uses native types directly or indirectly.
@@ -300,7 +300,7 @@
     m = self.module
     # Note that interfaces can contain scoped native types.
     return any(map(mojom.ContainsNativeTypes,
-                   m.enums + m.structs + m.interfaces))
+                   list(m.enums) + list(m.structs) + list(m.interfaces)))
 
   def _GetDirectlyUsedKinds(self):
     for struct in self.module.structs + self.module.unions:
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/pylib/mojom/generate/generator.py.orig	2020-03-17 02:07:29.328649756 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/pylib/mojom/generate/generator.py	2020-03-17 02:24:18.778623701 +0300
@@ -110,6 +110,9 @@
   full_dir = os.path.dirname(full_path)
   fileutil.EnsureDirectoryExists(full_dir)
 
+  if type(contents) != bytes:
+    contents = contents.encode('utf-8')
+
   # Dump the data to disk.
   with open(full_path, "wb") as f:
     f.write(contents)
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/pylib/mojom/generate/translate.py.orig	2020-03-17 02:40:03.678599312 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/pylib/mojom/generate/translate.py	2020-03-17 02:41:03.728597762 +0300
@@ -280,9 +280,9 @@
     struct.enums = map(
         lambda enum: _Enum(module, enum, struct),
         _ElemsOfType(parsed_struct.body, ast.Enum, parsed_struct.mojom_name))
-    struct.constants = map(
+    struct.constants = list(map(
         lambda constant: _Constant(module, constant, struct),
-        _ElemsOfType(parsed_struct.body, ast.Const, parsed_struct.mojom_name))
+        _ElemsOfType(parsed_struct.body, ast.Const, parsed_struct.mojom_name)))
     # Stash fields parsed_struct here temporarily.
     struct.fields_data = _ElemsOfType(
         parsed_struct.body, ast.StructField, parsed_struct.mojom_name)
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/pylib/mojom/generate/translate.py.orig	2020-03-17 02:40:03.678599312 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/pylib/mojom/generate/translate.py	2020-03-17 02:46:58.108588615 +0300
@@ -136,7 +136,7 @@
   to the location where the type is referenced."""
   if spec.startswith('x:'):
     mojom_name = spec[2:]
-    for i in range(len(scope), -1, -1):
+    for i in range(len(list(scope)), -1, -1):
       test_spec = 'x:'
       if i > 0:
         test_spec += '.'.join(scope[:i]) + '.'
@@ -155,7 +155,7 @@
   # enum name.
   if isinstance(kind, mojom.Enum) and '.' not in mojom_name:
     mojom_name = '%s.%s' % (kind.spec.split(':', 1)[1], mojom_name)
-  for i in reversed(range(len(scope) + 1)):
+  for i in reversed(range(len(list(scope)) + 1)):
     test_spec = '.'.join(scope[:i])
     if test_spec:
       test_spec += '.'
@@ -230,7 +230,7 @@
     # It is not allowed to use map as key, so there shouldn't be nested ']'s
     # inside the key type spec.
     key_end = spec.find(']')
-    assert key_end != -1 and key_end < len(spec) - 1
+    assert key_end != -1 and key_end < len(list(spec)) - 1
     assert spec[key_end+1] == '[' and spec[-1] == ']'
 
     first_kind = spec[2:key_end]
--- /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/pylib/mojom/generate/translate.py.orig	2020-03-17 02:40:03.678599312 +0300
+++ /var/tmp/portage/www-client/ungoogled-chromium-80.0.3987.132_p1/work/chromium-80.0.3987.132/mojo/public/tools/bindings/pylib/mojom/generate/translate.py	2020-03-17 02:50:08.568583699 +0300
@@ -277,12 +277,12 @@
     struct.constants = []
     struct.fields_data = []
   else:
-    struct.enums = map(
+    struct.enums = list(map(
         lambda enum: _Enum(module, enum, struct),
-        _ElemsOfType(parsed_struct.body, ast.Enum, parsed_struct.mojom_name))
-    struct.constants = map(
+        _ElemsOfType(parsed_struct.body, ast.Enum, parsed_struct.mojom_name)))
+    struct.constants = list(map(
         lambda constant: _Constant(module, constant, struct),
-        _ElemsOfType(parsed_struct.body, ast.Const, parsed_struct.mojom_name))
+        _ElemsOfType(parsed_struct.body, ast.Const, parsed_struct.mojom_name)))
     # Stash fields parsed_struct here temporarily.
     struct.fields_data = _ElemsOfType(
         parsed_struct.body, ast.StructField, parsed_struct.mojom_name)
@@ -396,13 +396,13 @@
   method = mojom.Method(
       interface, parsed_method.mojom_name,
       ordinal=parsed_method.ordinal.value if parsed_method.ordinal else None)
-  method.parameters = map(
+  method.parameters = list(map(
       lambda parameter: _Parameter(module, parameter, interface),
-      parsed_method.parameter_list)
+      parsed_method.parameter_list))
   if parsed_method.response_parameter_list is not None:
-    method.response_parameters = map(
+    method.response_parameters = list(map(
         lambda parameter: _Parameter(module, parameter, interface),
-                          parsed_method.response_parameter_list)
+                          parsed_method.response_parameter_list))
   method.attributes = _AttributeListToDict(parsed_method.attribute_list)
 
   # Enforce that only methods with response can have a [Sync] attribute.
@@ -427,12 +427,12 @@
   interface.mojom_name = parsed_iface.mojom_name
   interface.spec = 'x:' + module.mojom_namespace + '.' + interface.mojom_name
   module.kinds[interface.spec] = interface
-  interface.enums = map(
+  interface.enums = list(map(
       lambda enum: _Enum(module, enum, interface),
-      _ElemsOfType(parsed_iface.body, ast.Enum, parsed_iface.mojom_name))
-  interface.constants = map(
+      _ElemsOfType(parsed_iface.body, ast.Enum, parsed_iface.mojom_name)))
+  interface.constants = list(map(
       lambda constant: _Constant(module, constant, interface),
-      _ElemsOfType(parsed_iface.body, ast.Const, parsed_iface.mojom_name))
+      _ElemsOfType(parsed_iface.body, ast.Const, parsed_iface.mojom_name)))
   # Stash methods parsed_iface here temporarily.
   interface.methods_data = _ElemsOfType(
       parsed_iface.body, ast.Method, parsed_iface.mojom_name)
@@ -526,9 +526,9 @@
   enum.parent_kind = parent_kind
   enum.attributes = _AttributeListToDict(parsed_enum.attribute_list)
   if not enum.native_only:
-    enum.fields = map(
+    enum.fields = list(map(
         lambda field: _EnumField(module, enum, field, parent_kind),
-        parsed_enum.enum_value_list)
+        parsed_enum.enum_value_list))
     enum.min_value, enum.max_value = _ResolveNumericEnumValues(enum.fields)
 
   module.kinds[enum.spec] = enum
@@ -653,40 +653,40 @@
 
   filename = os.path.basename(path)
   # First pass collects kinds.
-  module.enums = map(
+  module.enums = list(map(
       lambda enum: _Enum(module, enum, None),
-      _ElemsOfType(tree.definition_list, ast.Enum, filename))
-  module.structs = map(
+      _ElemsOfType(tree.definition_list, ast.Enum, filename)))
+  module.structs = list(map(
       lambda struct: _Struct(module, struct),
-      _ElemsOfType(tree.definition_list, ast.Struct, filename))
-  module.unions = map(
+      _ElemsOfType(tree.definition_list, ast.Struct, filename)))
+  module.unions = list(map(
       lambda union: _Union(module, union),
-      _ElemsOfType(tree.definition_list, ast.Union, filename))
-  module.interfaces = map(
+      _ElemsOfType(tree.definition_list, ast.Union, filename)))
+  module.interfaces = list(map(
       lambda interface: _Interface(module, interface),
-      _ElemsOfType(tree.definition_list, ast.Interface, filename))
-  module.constants = map(
+      _ElemsOfType(tree.definition_list, ast.Interface, filename)))
+  module.constants = list(map(
       lambda constant: _Constant(module, constant, None),
-      _ElemsOfType(tree.definition_list, ast.Const, filename))
+      _ElemsOfType(tree.definition_list, ast.Const, filename)))
 
   # Second pass expands fields and methods. This allows fields and parameters
   # to refer to kinds defined anywhere in the mojom.
   all_defined_kinds = {}
   for struct in module.structs:
-    struct.fields = map(lambda field:
-        _StructField(module, field, struct), struct.fields_data)
+    struct.fields = list(map(lambda field:
+        _StructField(module, field, struct), struct.fields_data))
     del struct.fields_data
     all_defined_kinds[struct.spec] = struct
     for enum in struct.enums:
       all_defined_kinds[enum.spec] = enum
   for union in module.unions:
-    union.fields = map(lambda field:
-        _UnionField(module, field, union), union.fields_data)
+    union.fields = list(map(lambda field:
+        _UnionField(module, field, union), union.fields_data))
     del union.fields_data
     all_defined_kinds[union.spec] = union
   for interface in module.interfaces:
-    interface.methods = map(lambda method:
-        _Method(module, method, interface), interface.methods_data)
+    interface.methods = list(map(lambda method:
+        _Method(module, method, interface), interface.methods_data))
     del interface.methods_data
     all_defined_kinds[interface.spec] = interface
     for enum in interface.enums:
