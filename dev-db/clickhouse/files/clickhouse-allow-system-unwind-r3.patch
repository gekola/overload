--- a/cmake/find/unwind.cmake
+++ b/cmake/find/unwind.cmake
@@ -1,5 +1,6 @@
 option (USE_UNWIND "Enable libunwind (better stacktraces)" ${ENABLE_LIBRARIES})
+option (USE_INTERNAL_UNWIND_LIBRARY "Set to FALSE to use system unwind library instead of bundled" ON)
 
 if (NOT CMAKE_SYSTEM MATCHES "Linux" OR ARCH_ARM OR ARCH_32)
     set (USE_UNWIND OFF)
 endif ()
@@ -10,8 +11,16 @@
 endif ()
 
 if (USE_UNWIND)
-    add_subdirectory(contrib/libunwind-cmake)
-    set (UNWIND_LIBRARIES unwind)
+    if(USE_INTERNAL_UNWIND_LIBRARY)
+        add_subdirectory(contrib/libunwind-cmake)
+        set (UNWIND_LIBRARIES unwind)
+    else()
+        find_library (UNWIND_LIBRARIES NAMES unwind)
+        check_library_exists(gcc_s __gcc_personality_v0 "" LIBUNWIND_HAS_GCC_S_LIB)
+        find_path (UNWIND_INCLUDE_DIR NAMES unwind.h PATHS ${UNWIND_INCLUDE_PATHS})
+        set(CMAKE_REQUIRED_INCLUDES ${UNWIND_INCLUDE_DIR})
+        set(CMAKE_REQUIRED_LIBRARIES ${UNWIND_LIBRARIES})
+    endif()
     set (EXCEPTION_HANDLING_LIBRARY ${UNWIND_LIBRARIES})
 
     message (STATUS "Using libunwind: ${UNWIND_LIBRARIES}")
--- a/cmake/find/cxx.cmake
+++ b/cmake/find/cxx.cmake
@@ -32,5 +32,8 @@
     message (STATUS "Using libcxxabi: ${LIBCXXABI_LIBRARY}")
 else ()
     target_link_libraries(global-libs INTERFACE -l:libstdc++.a -l:libstdc++fs.a) # Always link these libraries as static
     target_link_libraries(global-libs INTERFACE ${EXCEPTION_HANDLING_LIBRARY})
+    if(LIBUNWIND_HAS_GCC_S_LIB)
+        target_link_libraries(global-libs INTERFACE gcc_s)
+    endif()
 endif ()
