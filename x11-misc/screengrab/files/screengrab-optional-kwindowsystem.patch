commit de36c1466705a8a7b93a395280d511da4deaba0b
Author: Nick H <gerkola@gmail.com>
Date:   Sat Jun 1 01:35:10 2019 +0300

    kde-optional

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 30cd117..2558edf 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,6 +14,7 @@ option(SG_DBUS_NOTIFY "Enable D-Bus notifications" ON)
 option(SG_EXT_EDIT "Enable ability to edit screenshots in external editor" ON)
 option(SG_EXT_UPLOADS "Enable upload screenshots to Imgur" ON)
 option(SG_GLOBALSHORTCUTS "Enable global shortcuts" OFF)
+option(SG_USE_SYSTEM_KF5 "Use KWindowSystem for active window detection" ON)
 option(UPDATE_TRANSLATIONS "Update source translation translations/*.ts files" OFF)
 
 # Minimum Versions
@@ -25,7 +26,9 @@ find_package(Qt5LinguistTools  ${QT_MINIMUM_VERSION} REQUIRED)
 find_package(Qt5Network ${QT_MINIMUM_VERSION} REQUIRED)
 find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
 find_package(Qt5X11Extras ${QT_MINIMUM_VERSION} REQUIRED)
-find_package(KF5WindowSystem ${KF5_MINIMUM_VERSION} REQUIRED)
+if (SG_USE_SYSTEM_KF5)
+    find_package(KF5WindowSystem ${KF5_MINIMUM_VERSION} REQUIRED)
+endif(SG_USE_SYSTEM_KF5)
 
 find_package(X11)
 if (X11_FOUND)
@@ -107,6 +110,7 @@ message(STATUS "Imgur upload support: " ${SG_EXT_UPLOADS})
 message(STATUS "Editing screenshots in external editor support: " ${SG_EXT_EDIT})
 message(STATUS "Enable D-Bus notifications: " ${SG_DBUS_NOTIFY})
 message(STATUS "Use system Qxt Library: " ${SG_USE_SYSTEM_QXT})
+message(STATUS "Use system KWindowSystem: " ${SG_USE_SYSTEM_KF5})
 message(STATUS "Update source translation translations/*.ts files: " ${UPDATE_TRANSLATIONS})
 
 # docs
@@ -224,6 +228,10 @@ if(SG_DBUS_NOTIFY)
     target_link_libraries(screengrab Qt5::DBus)
 endif()
 
+if(SG_USE_SYSTEM_KF5)
+    target_link_libraries(sceeengrab KF5::WindowSystem)
+endif()
+
 if (X11_XCB_FOUND)
     add_definitions( -DX11_XCB_FOUND="1")
     target_link_libraries(screengrab ${X11_XCB_LIBRARIES})
@@ -245,7 +253,7 @@ if (XCB_XFIXES_FOUND)
 endif()
 
 # Link with Network and X11Extras. See pull#86. TODO: Should be optional when upload module is needed.
-target_link_libraries(screengrab qkeysequencewidget Qt5::Widgets KF5::WindowSystem Qt5::X11Extras Qt5::Network ${X11_LIBRARIES})
+target_link_libraries(screengrab qkeysequencewidget Qt5::Widgets Qt5::X11Extras Qt5::Network ${X11_LIBRARIES})
 
 # installing
 install(TARGETS screengrab RUNTIME DESTINATION bin)
diff --git a/src/core/core.cpp b/src/core/core.cpp
index a903dcf..38600df 100644
--- a/src/core/core.cpp
+++ b/src/core/core.cpp
@@ -29,7 +29,9 @@
 
 #include <QDebug>
 
+#ifdef SG_USE_SYSTEM_KF5
 #include <KF5/KWindowSystem/KWindowSystem>
+#endif
 #include <xcb/xfixes.h>
 
 #ifdef X11_XCB_FOUND
@@ -251,6 +253,7 @@ void Core::getActiveWindow() // called only with window screenshots
     const QDesktopWidget *desktop = QApplication::desktop();
     const int screenNum = desktop->screenNumber(QCursor::pos());
 
+#ifdef SG_USE_SYSTEM_KF5
     WId wnd = KWindowSystem::activeWindow();
 
     // this window screenshot will be invalid
@@ -274,12 +277,53 @@ void Core::getActiveWindow() // called only with window screenshots
     KWindowInfo info(wnd, NET::XAWMState | NET::WMFrameExtents);
     if (!invalid && info.mappingState() != NET::Visible)
         invalid = true;
+#else
+    XWindowAttributes attr;
+    xcb_connection_t *conn = QX11Info::connection();
+
+    xcb_grab_server(conn);
+
+    xcb_connection_t *connection = QX11Info::connection();
+    xcb_get_input_focus_reply_t *focusReply;
+    xcb_query_tree_cookie_t treeCookie;
+    xcb_query_tree_reply_t *treeReply;
+
+    focusReply = xcb_get_input_focus_reply(conn, xcb_get_input_focus(connection), nullptr);
+    xcb_window_t wnd = focusReply->focus;
+    while (1) {
+        treeCookie = xcb_query_tree(connection, wnd);
+        treeReply = xcb_query_tree_reply(connection, treeCookie, nullptr);
+        if (!treeReply) {
+            wnd = 0;
+            break;
+        }
+        if (wnd == treeReply->root || treeReply->parent == treeReply->root) {
+            break;
+        } else {
+            wnd = treeReply->parent;
+        }
+        free(treeReply);
+    }
+    free(treeReply);
+
+    // this window screenshot will be invalid
+    // if there's no active window or the active window is ours
+    bool invalid(!wnd || (_wnd && _wnd->winId() == wnd));
+    if (!invalid)
+    {
+        int stat = XGetWindowAttributes(QX11Info::display(), wnd, &attr);
+        invalid =  !stat || attr.map_state != IsViewable;
+    }
+#endif
 
     // if this is an invalid screenshot, take a fullscreen shot instead
     if (invalid)
     {
         qWarning() << "Could not take a window screenshot.";
         *_pixelMap = screens[screenNum]->grabWindow(desktop->winId());
+#ifndef SG_USE_SYSTEM_KF5
+        xcb_ungrab_server(conn);
+#endif
         return;
     }
 
@@ -287,9 +331,13 @@ void Core::getActiveWindow() // called only with window screenshots
     if (_conf->getNoDecoration())
     {
         *_pixelMap = screens[screenNum]->grabWindow(wnd);
+#ifndef SG_USE_SYSTEM_KF5
+        xcb_ungrab_server(conn);
+#endif
         return;
     }
 
+#ifdef SG_USE_SYSTEM_KF5
     QRect geometry = info.frameGeometry();
     *_pixelMap = screens[screenNum]->grabWindow(QApplication::desktop()->winId(),
                                      geometry.x(),
@@ -297,6 +345,15 @@ void Core::getActiveWindow() // called only with window screenshots
                                      geometry.width(),
                                                 geometry.height());
     grabCursor(geometry.x(), geometry.y());
+#else
+    *_pixelMap = screens[screenNum]->grabWindow(QApplication::desktop()->winId(),
+                                     attr.x,
+                                     attr.y,
+                                     attr.width,
+                                     attr.height);
+    grabCursor(attr.x, attr.y);
+    xcb_ungrab_server(conn);
+#endif
 }
 
 void Core::grabCursor(int offsetX, int offsetY)
diff --git a/src/core/fixx11h.h b/src/core/fixx11h.h
new file mode 100644
index 0000000..ebf9114
--- /dev/null
+++ b/src/core/fixx11h.h
@@ -0,0 +1,18 @@
+// This is a standard way (e.g., in KDE libs) of dealing
+// with X11 headers mess.
+
+#ifdef Bool
+#undef Bool
+#endif
+
+#ifdef CursorShape
+#undef CursorShape
+#endif
+
+#ifdef None
+#undef None
+#endif
+
+#ifdef Status
+#undef Status
+#endif
diff --git a/src/core/x11utils.h b/src/core/x11utils.h
index f30de39..9b0af8a 100644
--- a/src/core/x11utils.h
+++ b/src/core/x11utils.h
@@ -24,7 +24,11 @@
 #include <QX11Info>
 
 #include <X11/Xlib-xcb.h>
+#ifdef SG_USE_SYSTEM_KF5
 #include <fixx11h.h>
+#else
+#include "fixx11h.h"
+#endif
 #include <xcb/xcb.h>
 
 namespace X11Utils {
