# -*-eselect-*-  vim: ft=eselect
# Copyright 2019 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

DESCRIPTION="Manage the /usr/bin/firefox symlink"
VERSION="20190427"

find_missing_broken_symlinks() {
        local -a missing_symlinks
        local required_symlinks=( "${EROOT}/usr/bin/firefox" )

        for i in "${required_symlinks[@]}"; do
                local symlink="${EROOT%/}${i}"

                if [[ -L "${symlink}" && -e "${symlink}" ]]; then
                        # existing symlink
                        continue
                else
                        missing_symlinks+=( "${symlink}" )
                fi
        done

        echo "${missing_symlinks[@]}"
}

find_targets() {
    local f
    for f in "${EROOT}"/usr/bin/firefox-[[:digit:]]*; do
        [[ -x ${f} ]] && basename "${f}"
    done
}

remove_symlink() {
	unlink "${EROOT}/usr/bin/firefox"
}

set_symlink() {
    local target=$1

    if is_number "${target}"; then
        local targets=( $(find_targets) )
        target=${targets[target-1]}
    fi

    [[ -z ${target} || ! -x ${EROOT}/usr/bin/${target} ]] \
        && die -q "Target \"$1\" doesn't appear to be valid!"

    ln -s "${target}" "${EROOT}/usr/bin/firefox"
}


describe_cleanup() {
        echo "This action is not to be called manually."
}

do_cleanup() {
        [[ -z ${@} ]] || die -q "This function does not expect any arguments"

        # Do we need to clean up?
        local missing_symlinks=( $(find_missing_broken_symlinks) )
        if [[ ${#missing_symlinks[@]} -eq 0 ]]; then
                echo "Nothing to clean up."
                return
        fi

        remove_symlink

        local targets=( $(find_targets) )

        if [[ ${#targets[@]} -ne 0 ]]; then
                echo "Marking the latest still installed version as default..."
                do_set ${#targets[@]}
        else
                echo "No firefox profiles left on the system. Stale symlinks removed."
        fi
}


describe_show() {
    echo "Show the current firefox symlink"
}

do_show() {
    write_list_start "Current firefox symlink:"
    if [[ -L ${EROOT}/usr/bin/firefox ]]; then
        local firefox=$(readlink "${EROOT}/usr/bin/firefox")
        write_kv_list_entry "${firefox%/}" ""
    else
        write_kv_list_entry "(unset)" ""
    fi
}


describe_list() {
    echo "List available firefox symlink targets"
}

do_list() {
    local i targets=( $(find_targets) )

    write_list_start "Available firefox symlink targets:"
    for (( i = 0; i < ${#targets[@]}; i++ )); do
        # highlight the target where the symlink is pointing to
        [[ ${targets[i]} = \
            $(basename "$(readlink "${EROOT}/usr/bin/firefox")") ]] \
            && targets[i]=$(highlight_marker "${targets[i]}")
    done
    write_numbered_list -m "(none found)" "${targets[@]}"
}


describe_set() {
    echo "Set a new firefox symlink target"
}

describe_set_parameters() {
    echo "<target>"
}

describe_set_options() {
    echo "target : Target name or number (from 'list' action)"
}

do_set() {
    [[ -z $1 ]] && die -q "You didn't tell me what to set the symlink to"
    [[ $# -gt 1 ]] && die -q "Too many parameters"

    if [[ -L ${EROOT}/usr/bin/firefox ]]; then
        # existing symlink
        remove_symlink || die -q "Couldn't remove existing symlink"
        set_symlink "$1" || die -q "Couldn't set a new symlink"
    elif [[ -e ${EROOT}/usr/bin/firefox ]]; then
        # we have something strange
        die -q "${EROOT}/usr/bin/firefox exists but is not a symlink"
    else
        set_symlink "$1" || die -q "Couldn't set a new symlink"
    fi
}


describe_update() {
        echo "Switch to the most recent firefox"
}

describe_update_options() {
        echo "--if-unset    : Do not override existing selection"
}

do_update() {
        local if_unset="0"
        while [[ $# > 0 ]]; do
                case "$1" in
                        --if-unset)
                                if_unset="1"
                                ;;
                        *)
                                die -q "Unrecognized argument '$1'"
                                ;;
                esac
                shift
        done

        if [[ "${if_unset}" == "1" ]]; then
                local missing_symlinks=( $(find_missing_broken_symlinks) )
                if [[ ${#missing_symlinks[@]} -eq 0 ]]; then
                        return
                else
                        echo "Not all symlinks set. Will switch to the most recent firefox!"
                fi
        fi

        local targets=( $(find_targets) )
        do_set ${#targets[@]}
}
